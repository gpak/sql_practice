/* Creating Tables and Inserting Values */

CREATE TABLE provider_table (
	provider_id integer PRIMARY KEY,
	provider_name varchar(30),
	created timestamp
);

CREATE TABLE profession_table (
	profession_id integer PRIMARY KEY,
	profession varchar(2)
);

CREATE TABLE provider_profession_table (
	provider_id integer,
	profession_id integer,
	PRIMARY KEY (provider_id, profession_id),
	FOREIGN KEY (provider_id) references provider_table(provider_id) ON DELETE CASCADE,
	FOREIGN KEY (profession_id) references profession_table(profession_id) ON DELETE CASCADE
);

CREATE TABLE provider_practice_table (
	provider_practice_id integer,
	provider_id integer,
	PRIMARY KEY (provider_practice_id),
	FOREIGN KEY (provider_id) references provider_table(provider_id) ON DELETE CASCADE
);

INSERT INTO provider_table (provider_id, provider_name, created)
VALUES ('1', 'John Smith', '3/4/2009 12:45:00'),
	   ('2', 'Michael Rowe', '5/3/2010 15:34:34'),
	   ('3', 'Gregory Adams', '4/5/2011 23:44:59');

INSERT INTO profession_table (profession_id, profession)
VALUES ('1', 'DO'),
	   ('2', 'MD');
	   
INSERT INTO provider_profession_table (provider_id, profession_id)
VALUES ('1', '1'),
	   ('1', '2'),
	   ('2', '2'),
	   ('3', '1'),
	   ('3', '2');

INSERT INTO provider_practice_table (provider_practice_id, provider_id, city)
VALUES ('1', '1', 'Morristown'),
	   ('2', '2', 'Passaic'),
	   ('3', '2', 'Jersey City'),
	   ('4', '1', 'Trenton'),
	   ('5', '2', 'East Rutherford'),
	   ('6', '3', 'Rutherford'),
	   ('7', '1', 'Lyndhurst');
=============================================================================================/* Questions */=========================================     
Question 1:
1.	 List all the providers, ordered by provider name. While outputting the names of all the providers, if the name of the provider contains the word ‘John’, output ‘Johnathan’ instead of ‘John’ within the same output field of provider_name.

UPDATE provider_table
SET 
provider_name = replace(provider_name, 'John', 'Johnathan');

SELECT provider_name
FROM provider_table
ORDER BY provider_name;

2.	 List out the degrees and the counts that are associated to the degree.  If the degree is listed more than twice, output ‘Popular degree’.

/* Check to ensure I have proper output and joins between the three tables */
SELECT distinct(prof.profession), count(*) as counts_of_degree
FROM provider_profession_table as ppt

join provider_table as prov 
	ON ppt.provider_id = prov.provider_id

join profession_table as prof
ON  ppt.profession_id = prof.profession_id

GROUP BY prof.profession;

/* Add Output for Popular degree and not so popular degree */
SELECT distinct(prof.profession), count(*) as counts_of_degree,

CASE
	WHEN count(*) > 2 
		THEN 'Popular degree'
	WHEN count(*) <= 2
		THEN 'Not Popular degree'
END no_degrees

FROM provider_profession_table as ppt

join provider_table as prov 
	ON ppt.provider_id = prov.provider_id

join profession_table as prof
ON  ppt.profession_id = prof.profession_id

GROUP BY prof.profession;

3.	How many providers have a profession of DO and is associated with a city that contains ‘er’ in its name?

/* Created a new table */
CREATE TABLE comp_ppt
as
SELECT prov.provider_id, prov.provider_name, prov.created, prof.profession_id, prof.profession
FROM provider_profession_table as ppt

join provider_table as prov 
	ON ppt.provider_id = prov.provider_id

join profession_table as prof
ON  ppt.profession_id = prof.profession_id;

/* join comp_ppt and ppt_city data */
SELECT * 
FROM comp_ppt 
inner join provider_practice_table as ppt_city
ON comp_ppt.provider_id = ppt_city.provider_id;

/* final answer */
SELECT comp_ppt.profession, count(*) 
FROM comp_ppt 
inner join provider_practice_table as ppt_city
ON comp_ppt.provider_id = ppt_city.provider_id
WHERE profession = 'DO'
	AND city LIKE '%er%'
group by comp_ppt.profession;

4.	List all providers with their profession code created after April of 2010 and is associated with a city that has more than one word in the name.

SELECT * 
FROM comp_ppt
inner join provider_practice_table as ppt_city
ON comp_ppt.provider_id = ppt_city.provider_id
WHERE created > '2010-04-01'
	AND city LIKE '% %';

5.	Roger has a list of doctors on a csv file.  The file contains a column called “provider_id”.  He would like to compare that file against the provider table and see what provider_id does not exist.  How would you bring the file in the database and what query would you use on the comparison?

COPY table_name
FROM ‘C:/mydirectory/rogers_doctorfile.csv’
WITH (FORMAT CSV, HEADER);

SELCT * FROM rogerslistdr
LEFT JOIN provider_table
ON rogerslistdr.provider_id = provider_table.provider_id;

6.	Sally is looking for a doctor who lives near her town in the Rutherford area and knows she a couple of options.  Write a query that will list the doctors in her town using a single where clause.  

SELECT * 
FROM comp_ppt
inner join provider_practice_table as ppt_city
ON comp_ppt.provider_id = ppt_city.provider_id
WHERE city LIKE '%Rutherford';

7.	John has come to you and noticed some of the query performance he is experiencing is extremely slow.  How would you approach this situation to figure out the performance issue? 

-Check Logs for any abnormalities.
-Explain Analze keywords in postgres to display statistics about query process and how long it took to execute.

8.	Write an index using the query you compiled in question 5.
CREATE INDEX indx_provider_id on rogerslistdr (provider_id);
9. Please see document
10. Please see document
